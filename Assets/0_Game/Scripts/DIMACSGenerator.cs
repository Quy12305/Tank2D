using System.IO;
using UnityEngine;
using System.Collections.Generic;

public class DIMACSGenerator
{
    private int[,] map;
    private int width;
    private int height;

    public DIMACSGenerator(int[,] grid)
    {
        map = grid;
        width = grid.GetLength(0);
        height = grid.GetLength(1);
    }

    public void GenerateDIMACS(string filePath, Vector2Int playerPos, List<Vector2Int> enemyPositions)
    {
        using (StreamWriter writer = new StreamWriter(filePath))
        {
            writer.WriteLine("c DIMACS file generated by MazeGenerator");

            // Định nghĩa các node có demand (player và enemy)
            int playerNode = GetNodeId(playerPos.x, playerPos.y);
            writer.WriteLine($"n {playerNode} {-enemyPositions.Count}"); // Demand cho player

            foreach (var enemy in enemyPositions)
            {
                int enemyNode = GetNodeId(enemy.x, enemy.y);
                writer.WriteLine($"n {enemyNode} 1"); // Demand cho từng enemy
            }

            // Định nghĩa các cung
            for (int x = 0; x < width; x++)
            {
                for (int y = 0; y < height; y++)
                {
                    if (map[x, y] == 0)
                    {
                        AddArcsForNode(x, y, writer);
                    }
                }
            }
        }
    }

    private int GetNodeId(int x, int y) => x + y * width;

    private void AddArcsForNode(int x, int y, StreamWriter writer)
    {
        int currentNode = GetNodeId(x, y);

        // Kiểm tra và thêm cung cho 4 hướng
        AddArcIfValid(currentNode, x + 1, y, writer); // Phải
        AddArcIfValid(currentNode, x - 1, y, writer); // Trái
        AddArcIfValid(currentNode, x, y + 1, writer); // Trên
        AddArcIfValid(currentNode, x, y - 1, writer); // Dưới
    }

    private void AddArcIfValid(int fromNode, int toX, int toY, StreamWriter writer)
    {
        if (toX >= 0 && toX < width && toY >= 0 && toY < height && map[toX, toY] == 0)
        {
            int toNode = GetNodeId(toX, toY);
            writer.WriteLine($"a {fromNode} {toNode} 1 1"); // Capacity=1, Cost=1
            writer.WriteLine($"a {toNode} {fromNode} 1 1"); // Cung ngược chiều
        }
    }
}